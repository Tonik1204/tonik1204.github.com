{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/weather-tabs/weather-tabs.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useContext, useMemo } from 'react';\nimport styled from 'styled-components';\nimport config from 'config/config';\nimport Spinner from 'atoms/spinner';\nimport WarningText from 'atoms/warning-text';\nimport { WeatherContext } from 'components/weather-store';\nimport { Toast } from 'components/toast-container';\nimport TabContent from './tab-content';\nimport Tabs from './tabs';\nconst DAYS_AMOUNT = 5;\n\nconst transformWeatherData = data => data.map((item, i) => ({\n  id: i,\n  date: item.dt_txt,\n  weather_icon: item.weather[0].icon,\n  description: item.weather[0].description,\n  temp: item.main.temp,\n  clouds: item.clouds.all,\n  humidity: item.main.humidity,\n  pressure: item.main.pressure,\n  wind_deg: item.wind.deg,\n  wind_speed: item.wind.speed,\n  fallout: item.hasOwnProperty('rain') ? item.rain['3h'] : item.hasOwnProperty('snow') ? item.snow['3h'] : 0\n}));\n\nconst getGroupedWeather = (data, groupSize) => data.reduce((arr, item, i) => {\n  if (!(i % groupSize)) {\n    arr[arr.length] = [];\n  }\n\n  arr[arr.length - 1].push(item);\n  return arr;\n}, []);\n\nconst setAvarageTemp = data => data.forEach(arr => {\n  let max = -Infinity;\n  let min = Infinity;\n  arr.forEach(({\n    temp\n  }) => {\n    if (temp > max) {\n      max = temp;\n    } else if (temp < min) {\n      min = temp;\n    }\n  });\n  arr[0] = _objectSpread({}, arr[0], {\n    max,\n    min\n  });\n});\n\nconst getAvarageItems = data => data.map(arr => arr[0]);\n\nconst WeatherTabs = props => {\n  const className = props.className;\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLocating = _useState2[0],\n        setIsLocating = _useState2[1];\n\n  const _useState3 = useState('Please, enter your city..'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        textContent = _useState4[0],\n        setTextContent = _useState4[1];\n\n  const _useContext = useContext(WeatherContext),\n        isWeatherLoading = _useContext.isWeatherLoading,\n        isWeatherFetchingError = _useContext.isWeatherFetchingError,\n        weatherData = _useContext.weatherData,\n        doWeatherFetch = _useContext.doWeatherFetch;\n\n  const groupSize = weatherData.length / DAYS_AMOUNT;\n  useEffect(() => {\n    function success(position) {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      doWeatherFetch(config.forecast_api_url + \"&lat=\".concat(lat, \"&lon=\").concat(lon));\n      setIsLocating(false);\n    }\n\n    function error() {\n      setIsLocating(false);\n      setTextContent('Unable to retrieve your location. Please, enter your city..');\n    }\n\n    if (navigator.geolocation) {\n      setTextContent('');\n      navigator.geolocation.getCurrentPosition(success, error);\n    } else {\n      setIsLocating(false);\n    }\n  }, [doWeatherFetch]);\n  const transformedData = useMemo(() => transformWeatherData(weatherData), [weatherData]);\n  const groupedWeather = useMemo(() => getGroupedWeather(transformedData, groupSize), [transformedData, groupSize]);\n  const avarageWeather = useMemo(() => {\n    setAvarageTemp(groupedWeather);\n    return getAvarageItems(groupedWeather);\n  }, [groupedWeather]);\n\n  const setTabContent = tab => {\n    const index = tab.id / groupSize;\n    return React.createElement(TabContent, {\n      data: groupedWeather[index],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, isWeatherLoading || isLocating ? React.createElement(Spinner, {\n    size: \"lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }) : avarageWeather.length ? React.createElement(Tabs, {\n    tabs: avarageWeather,\n    setTabContent: setTabContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }) : React.createElement(WarningText, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, textContent), React.createElement(Toast, {\n    show: isWeatherFetchingError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }));\n};\n\nconst WeatherTabsStyled = styled(WeatherTabs)(_templateObject());\nexport default WeatherTabsStyled;","map":{"version":3,"sources":["/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/weather-tabs/weather-tabs.tsx"],"names":["React","useState","useEffect","useContext","useMemo","styled","config","Spinner","WarningText","WeatherContext","Toast","TabContent","Tabs","DAYS_AMOUNT","transformWeatherData","data","map","item","i","id","date","dt_txt","weather_icon","weather","icon","description","temp","main","clouds","all","humidity","pressure","wind_deg","wind","deg","wind_speed","speed","fallout","hasOwnProperty","rain","snow","getGroupedWeather","groupSize","reduce","arr","length","push","setAvarageTemp","forEach","max","Infinity","min","getAvarageItems","WeatherTabs","props","className","isLocating","setIsLocating","textContent","setTextContent","isWeatherLoading","isWeatherFetchingError","weatherData","doWeatherFetch","success","position","lat","coords","latitude","lon","longitude","forecast_api_url","error","navigator","geolocation","getCurrentPosition","transformedData","groupedWeather","avarageWeather","setTabContent","tab","index","WeatherTabsStyled"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useMemo } from 'react';\nimport styled from 'styled-components';\nimport config from 'config/config';\nimport Spinner from 'atoms/spinner';\nimport WarningText from 'atoms/warning-text';\nimport { WeatherContext } from 'components/weather-store';\nimport { Toast } from 'components/toast-container';\nimport TabContent from './tab-content';\nimport Tabs from './tabs';\n\nexport interface WeatherItem {\n  id: number;\n  date: string;\n  weather_icon: string;\n  description: string;\n  temp: number;\n  clouds: number;\n  humidity: number;\n  pressure: number;\n  wind_deg: number;\n  wind_speed: number;\n  fallout: number;\n}\n\nexport interface WeatherTabItem extends WeatherItem {\n  max: number;\n  min: number;\n}\n\ninterface Props {\n  className?: string;\n}\n\nconst DAYS_AMOUNT: number = 5;\n\nconst transformWeatherData = (data: any[]): WeatherItem[] =>\n  data.map((item, i) => ({\n    id: i,\n    date: item.dt_txt,\n    weather_icon: item.weather[0].icon,\n    description: item.weather[0].description,\n    temp: item.main.temp,\n    clouds: item.clouds.all,\n    humidity: item.main.humidity,\n    pressure: item.main.pressure,\n    wind_deg: item.wind.deg,\n    wind_speed: item.wind.speed,\n    fallout: item.hasOwnProperty('rain')\n      ? item.rain['3h']\n      : item.hasOwnProperty('snow')\n      ? item.snow['3h']\n      : 0,\n  }));\n\nconst getGroupedWeather = (data: any[], groupSize: number): any[][] =>\n  data.reduce((arr, item, i) => {\n    if (!(i % groupSize)) {\n      arr[arr.length] = [];\n    }\n    arr[arr.length - 1].push(item);\n    return arr;\n  }, []);\n\nconst setAvarageTemp = (data: any[][]): void =>\n  data.forEach(arr => {\n    let max = -Infinity;\n    let min = Infinity;\n    arr.forEach(({ temp }) => {\n      if (temp > max) {\n        max = temp;\n      } else if (temp < min) {\n        min = temp;\n      }\n    });\n    arr[0] = { ...arr[0], max, min };\n  });\n\nconst getAvarageItems = (data: any[][]): any[] => data.map(arr => arr[0]);\n\nconst WeatherTabs = (props: Props) => {\n  const { className } = props;\n  const [isLocating, setIsLocating] = useState<boolean>(true);\n  const [textContent, setTextContent] = useState<string>(\n    'Please, enter your city..',\n  );\n  const {\n    isWeatherLoading,\n    isWeatherFetchingError,\n    weatherData,\n    doWeatherFetch,\n  } = useContext(WeatherContext);\n  const groupSize: number = weatherData.length / DAYS_AMOUNT;\n\n  useEffect(() => {\n    function success(position) {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n\n      doWeatherFetch(config.forecast_api_url + `&lat=${lat}&lon=${lon}`);\n      setIsLocating(false);\n    }\n\n    function error() {\n      setIsLocating(false);\n      setTextContent(\n        'Unable to retrieve your location. Please, enter your city..',\n      );\n    }\n\n    if (navigator.geolocation) {\n      setTextContent('');\n      navigator.geolocation.getCurrentPosition(success, error);\n    } else {\n      setIsLocating(false);\n    }\n  }, [doWeatherFetch]);\n\n  const transformedData = useMemo(() => transformWeatherData(weatherData), [\n    weatherData,\n  ]);\n\n  const groupedWeather = useMemo(\n    () => getGroupedWeather(transformedData, groupSize),\n    [transformedData, groupSize],\n  );\n\n  const avarageWeather = useMemo(() => {\n    setAvarageTemp(groupedWeather);\n    return getAvarageItems(groupedWeather);\n  }, [groupedWeather]);\n\n  const setTabContent = (tab: WeatherTabItem): JSX.Element => {\n    const index = tab.id / groupSize;\n    return <TabContent data={groupedWeather[index]} />;\n  };\n\n  return (\n    <div className={className}>\n      {isWeatherLoading || isLocating ? (\n        <Spinner size=\"lg\" />\n      ) : avarageWeather.length ? (\n        <Tabs tabs={avarageWeather} setTabContent={setTabContent} />\n      ) : (\n        <WarningText>{textContent}</WarningText>\n      )}\n      <Toast show={isWeatherFetchingError} />\n    </div>\n  );\n};\n\nconst WeatherTabsStyled = styled(WeatherTabs)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n`;\n\nexport default WeatherTabsStyled;\n"]},"metadata":{},"sourceType":"module"}