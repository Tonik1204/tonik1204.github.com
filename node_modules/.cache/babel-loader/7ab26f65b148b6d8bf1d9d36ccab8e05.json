{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/search/search.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  flex: 1;\\n  margin-left: 1rem;\\n  position: relative;\\n\\n  .spinner {\\n    position: absolute;\\n    z-index: 1;\\n    right: 2rem;\\n  }\\n\\n  .dropdown {\\n    top: 2.9rem;\\n    transform: scale(0.95);\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useContext, useMemo } from 'react';\nimport styled from 'styled-components';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { toast, ToastContainer } from 'react-toastify';\nimport config, { toastTimer } from 'config/config';\nimport { hasOnlyLetters } from 'utils/helper';\nimport { SearchContext } from 'components/search-store';\nimport { WeatherContext } from 'components/weather-store';\nimport Spinner from 'atoms/spinner';\nimport ToastMessage from 'atoms/toast-message';\nimport Dropdown from 'atoms/dropdown';\nimport Input from 'atoms/input';\n\nconst Search = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        search = _useState2[0],\n        setSearch = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        hasFocus = _useState4[0],\n        setFocus = _useState4[1];\n\n  const _useContext = useContext(SearchContext),\n        isSearchLoading = _useContext.isSearchLoading,\n        isSearchFetchingError = _useContext.isSearchFetchingError,\n        searchData = _useContext.searchData,\n        cleanSearchData = _useContext.cleanSearchData,\n        doSearchFetch = _useContext.doSearchFetch;\n\n  const _useContext2 = useContext(WeatherContext),\n        doWeatherFetch = _useContext2.doWeatherFetch;\n\n  const className = props.className;\n  const showDropdown = !!searchData.length && hasFocus;\n  const dropdownItems = useMemo(() => searchData.map(({\n    country,\n    name\n  }) => \"\".concat(name, \", \").concat(country)), [searchData]);\n  useEffect(() => {\n    if (search.length > 2 && hasOnlyLetters(search)) {\n      doSearchFetch(config.city_api_url + search);\n    }\n  }, [search, doSearchFetch]);\n  useEffect(() => {\n    if (isSearchFetchingError) {\n      toast(React.createElement(ToastMessage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"To prevent CORS issues and to make search work properly, please install \", React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Allow-Control-Allow-Origin\"), \" chrome extention and turn it on\"));\n    }\n  }, [isSearchFetchingError]);\n\n  const dropdownSelectHandler = value => {\n    const query = value.replace(' ', '');\n    setSearch(value);\n    cleanSearchData();\n    doWeatherFetch(config.forecast_api_url + \"&q=\".concat(query));\n  };\n\n  const serachChangeHandler = e => {\n    const _ref = e.target,\n          value = _ref.value;\n    setSearch(value);\n  };\n\n  const searchFocusHandler = () => setFocus(!hasFocus);\n\n  return React.createElement(\"div\", {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, isSearchLoading && React.createElement(Spinner, {\n    size: \"sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(Input, {\n    type: \"search\",\n    value: search,\n    placeholder: \"Enter a city\",\n    onChange: serachChangeHandler,\n    onFocus: searchFocusHandler,\n    onBlur: searchFocusHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), showDropdown && React.createElement(Dropdown, {\n    items: dropdownItems,\n    onSelect: dropdownSelectHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(ToastContainer, {\n    autoClose: toastTimer,\n    preventDuplicated: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n};\n\nconst SearchStyled = styled(Search)(_templateObject());\nexport default SearchStyled;","map":{"version":3,"sources":["/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/search/search.tsx"],"names":["React","useState","useEffect","useContext","useMemo","styled","toast","ToastContainer","config","toastTimer","hasOnlyLetters","SearchContext","WeatherContext","Spinner","ToastMessage","Dropdown","Input","Search","props","search","setSearch","hasFocus","setFocus","isSearchLoading","isSearchFetchingError","searchData","cleanSearchData","doSearchFetch","doWeatherFetch","className","showDropdown","length","dropdownItems","map","country","name","city_api_url","dropdownSelectHandler","value","query","replace","forecast_api_url","serachChangeHandler","e","target","searchFocusHandler","SearchStyled"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useMemo } from 'react';\nimport styled from 'styled-components';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { toast, ToastContainer } from 'react-toastify';\nimport config, { toastTimer } from 'config/config';\nimport { hasOnlyLetters } from 'utils/helper';\nimport { SearchContext } from 'components/search-store';\nimport { WeatherContext } from 'components/weather-store';\nimport Spinner from 'atoms/spinner';\nimport ToastMessage from 'atoms/toast-message';\nimport Dropdown from 'atoms/dropdown';\nimport Input from 'atoms/input';\n\ninterface Props {\n  className?: string;\n}\n\nconst Search = (props: Props) => {\n  const [search, setSearch] = useState<string>('');\n  const [hasFocus, setFocus] = useState<boolean>(false);\n  const {\n    isSearchLoading,\n    isSearchFetchingError,\n    searchData,\n    cleanSearchData,\n    doSearchFetch,\n  } = useContext(SearchContext);\n  const { doWeatherFetch } = useContext(WeatherContext);\n\n  const { className } = props;\n  const showDropdown = !!searchData.length && hasFocus;\n  const dropdownItems = useMemo(\n    () => searchData.map(({ country, name }) => `${name}, ${country}`),\n    [searchData],\n  );\n\n  useEffect(() => {\n    if (search.length > 2 && hasOnlyLetters(search)) {\n      doSearchFetch(config.city_api_url + search);\n    }\n  }, [search, doSearchFetch]);\n\n  useEffect(() => {\n    if (isSearchFetchingError) {\n      toast(\n        <ToastMessage>\n          To prevent CORS issues and to make search work properly, please\n          install <strong>Allow-Control-Allow-Origin</strong> chrome extention\n          and turn it on\n        </ToastMessage>,\n      );\n    }\n  }, [isSearchFetchingError]);\n\n  const dropdownSelectHandler = (value: string): void => {\n    const query = value.replace(' ', '');\n    setSearch(value);\n    cleanSearchData();\n    doWeatherFetch(config.forecast_api_url + `&q=${query}`);\n  };\n\n  const serachChangeHandler = (e: React.SyntheticEvent): void => {\n    const { value } = e.target as HTMLInputElement;\n    setSearch(value);\n  };\n\n  const searchFocusHandler = () => setFocus(!hasFocus);\n\n  return (\n    <div className={className}>\n      {isSearchLoading && <Spinner size=\"sm\" />}\n      <Input\n        type=\"search\"\n        value={search}\n        placeholder=\"Enter a city\"\n        onChange={serachChangeHandler}\n        onFocus={searchFocusHandler}\n        onBlur={searchFocusHandler}\n      />\n      {showDropdown && (\n        <Dropdown items={dropdownItems} onSelect={dropdownSelectHandler} />\n      )}\n      <ToastContainer autoClose={toastTimer} preventDuplicated={true} />\n    </div>\n  );\n};\n\nconst SearchStyled = styled(Search)`\n  display: flex;\n  align-items: center;\n  flex: 1;\n  margin-left: 1rem;\n  position: relative;\n\n  .spinner {\n    position: absolute;\n    z-index: 1;\n    right: 2rem;\n  }\n\n  .dropdown {\n    top: 2.9rem;\n    transform: scale(0.95);\n  }\n`;\n\nexport default SearchStyled;\n"]},"metadata":{},"sourceType":"module"}