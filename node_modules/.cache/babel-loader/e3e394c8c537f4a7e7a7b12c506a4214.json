{"ast":null,"code":"import _slicedToArray from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/weather-store/weather-store.tsx\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"FETCH_INIT\"] = \"weather-forecast/fetch-init\";\n  ActionTypes[\"FETCH_ERROR\"] = \"weather-forecast/fetch-error\";\n  ActionTypes[\"FETCH_SUCCESS\"] = \"weather-forecast/fetch-success\";\n})(ActionTypes || (ActionTypes = {}));\n\nconst defaultState = {\n  isWeatherLoading: false,\n  isWeatherFetchingError: false,\n  weatherData: []\n};\n\nconst defaultContext = _objectSpread({}, defaultState, {\n  doWeatherFetch: () => null\n});\n\nexport const WeatherContext = React.createContext(defaultContext);\n\nconst weatherFetchReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_INIT:\n      return _objectSpread({}, state, {\n        isWeatherLoading: true,\n        isWeatherFetchingError: false\n      });\n\n    case ActionTypes.FETCH_SUCCESS:\n      return _objectSpread({}, state, {\n        isWeatherLoading: false,\n        isWeatherFetchingError: false,\n        weatherData: [...action.payload]\n      });\n\n    case ActionTypes.FETCH_ERROR:\n      return _objectSpread({}, state, {\n        isWeatherLoading: false,\n        isWeatherFetchingError: true\n      });\n\n    default:\n      throw new Error();\n  }\n};\n\nconst WeatherStore = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        url = _useState2[0],\n        setUrl = _useState2[1];\n\n  const _useReducer = useReducer(weatherFetchReducer, defaultState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({\n        type: ActionTypes.FETCH_INIT\n      });\n\n      try {\n        const result = await axios(url);\n\n        if (!didCancel) {\n          dispatch({\n            type: ActionTypes.FETCH_SUCCESS,\n            payload: result.data.list\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({\n            type: ActionTypes.FETCH_ERROR\n          });\n        }\n      }\n    };\n\n    if (url) {\n      fetchData();\n    }\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const doWeatherFetch = urlPath => {\n    setUrl(urlPath);\n  };\n\n  return React.createElement(WeatherContext.Provider, {\n    value: _objectSpread({}, state, {\n      doWeatherFetch\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default WeatherStore;","map":{"version":3,"sources":["/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/weather-store/weather-store.tsx"],"names":["React","useState","useEffect","useReducer","axios","ActionTypes","defaultState","isWeatherLoading","isWeatherFetchingError","weatherData","defaultContext","doWeatherFetch","WeatherContext","createContext","weatherFetchReducer","state","action","type","FETCH_INIT","FETCH_SUCCESS","payload","FETCH_ERROR","Error","WeatherStore","props","url","setUrl","dispatch","didCancel","fetchData","result","data","list","error","urlPath","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nenum ActionTypes {\n  FETCH_INIT = 'weather-forecast/fetch-init',\n  FETCH_ERROR = 'weather-forecast/fetch-error',\n  FETCH_SUCCESS = 'weather-forecast/fetch-success',\n}\n\ninterface State {\n  isWeatherLoading: boolean;\n  isWeatherFetchingError: boolean;\n  weatherData: any[];\n}\n\ninterface Action {\n  type: string;\n  payload?: any;\n}\n\ninterface Context extends State {\n  doWeatherFetch: (urlPath: string) => void;\n}\n\nconst defaultState: State = {\n  isWeatherLoading: false,\n  isWeatherFetchingError: false,\n  weatherData: [],\n};\n\nconst defaultContext: Context = {\n  ...defaultState,\n  doWeatherFetch: () => null,\n};\n\nexport const WeatherContext = React.createContext(defaultContext);\n\nconst weatherFetchReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_INIT:\n      return {\n        ...state,\n        isWeatherLoading: true,\n        isWeatherFetchingError: false,\n      };\n    case ActionTypes.FETCH_SUCCESS:\n      return {\n        ...state,\n        isWeatherLoading: false,\n        isWeatherFetchingError: false,\n        weatherData: [...action.payload],\n      };\n    case ActionTypes.FETCH_ERROR:\n      return {\n        ...state,\n        isWeatherLoading: false,\n        isWeatherFetchingError: true,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst WeatherStore = (props: any): JSX.Element => {\n  const [url, setUrl] = useState('');\n  const [state, dispatch] = useReducer(weatherFetchReducer, defaultState);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: ActionTypes.FETCH_INIT });\n\n      try {\n        const result = await axios(url);\n\n        if (!didCancel) {\n          dispatch({\n            type: ActionTypes.FETCH_SUCCESS,\n            payload: result.data.list,\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: ActionTypes.FETCH_ERROR });\n        }\n      }\n    };\n\n    if (url) {\n      fetchData();\n    }\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const doWeatherFetch = (urlPath: string) => {\n    setUrl(urlPath);\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        ...state,\n        doWeatherFetch,\n      }}\n    >\n      {props.children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default WeatherStore;\n"]},"metadata":{},"sourceType":"module"}