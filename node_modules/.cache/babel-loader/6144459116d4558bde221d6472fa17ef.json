{"ast":null,"code":"import _slicedToArray from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/search-store/search-store.tsx\";\nimport React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[\"FETCH_INIT\"] = \"search-city/fetch-init\";\n  ActionTypes[\"FETCH_ERROR\"] = \"search-city/fetch-error\";\n  ActionTypes[\"FETCH_SUCCESS\"] = \"search-city/fetch-success\";\n  ActionTypes[\"CLEAN_DATA\"] = \"search-city/clean-data\";\n})(ActionTypes || (ActionTypes = {}));\n\nconst defaultState = {\n  isSearchLoading: false,\n  isSearchFetchingError: false,\n  searchData: []\n};\n\nconst defaultContext = _objectSpread({}, defaultState, {\n  cleanSearchData: () => null,\n  doSearchFetch: () => null\n});\n\nexport const SearchContext = React.createContext(defaultContext);\n\nconst searchFetchReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_INIT:\n      return _objectSpread({}, state, {\n        isSearchLoading: true,\n        isSearchFetchingError: false\n      });\n\n    case ActionTypes.FETCH_SUCCESS:\n      return _objectSpread({}, state, {\n        isSearchLoading: false,\n        isSearchFetchingError: false,\n        searchData: [...action.payload]\n      });\n\n    case ActionTypes.CLEAN_DATA:\n      return _objectSpread({}, state, {\n        searchData: []\n      });\n\n    case ActionTypes.FETCH_ERROR:\n      return _objectSpread({}, state, {\n        isSearchLoading: false,\n        isSearchFetchingError: true\n      });\n\n    default:\n      throw new Error();\n  }\n};\n\nconst getTransformCityData = data => data.map(item => ({\n  city: item._embedded['city:item'].name,\n  country: item._embedded['city:item']._embedded['city:country'].name\n}));\n\nconst SearchStore = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        url = _useState2[0],\n        setUrl = _useState2[1];\n\n  const _useReducer = useReducer(searchFetchReducer, defaultState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({\n        type: ActionTypes.FETCH_INIT\n      });\n\n      try {\n        const result = await axios(url);\n        console.log(result);\n\n        if (!didCancel) {\n          dispatch({\n            type: ActionTypes.FETCH_SUCCESS,\n            payload: getTransformCityData(result.data._embedded['city:search-results'])\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({\n            type: ActionTypes.FETCH_ERROR\n          });\n        }\n      }\n    };\n\n    if (url) {\n      fetchData();\n    }\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const cleanSearchData = () => {\n    dispatch({\n      type: ActionTypes.CLEAN_DATA\n    });\n  };\n\n  const doSearchFetch = urlPath => {\n    setUrl(urlPath);\n  };\n\n  return React.createElement(SearchContext.Provider, {\n    value: _objectSpread({}, state, {\n      cleanSearchData,\n      doSearchFetch\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default SearchStore;","map":{"version":3,"sources":["/Users/tonik/Tonik/INTERVIEW_TASK/weather-forecast/src/components/search-store/search-store.tsx"],"names":["React","useState","useEffect","useReducer","axios","ActionTypes","defaultState","isSearchLoading","isSearchFetchingError","searchData","defaultContext","cleanSearchData","doSearchFetch","SearchContext","createContext","searchFetchReducer","state","action","type","FETCH_INIT","FETCH_SUCCESS","payload","CLEAN_DATA","FETCH_ERROR","Error","getTransformCityData","data","map","item","city","_embedded","name","country","SearchStore","props","url","setUrl","dispatch","didCancel","fetchData","result","console","log","error","urlPath","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\nimport axios from 'axios';\n\nenum ActionTypes {\n  FETCH_INIT = 'search-city/fetch-init',\n  FETCH_ERROR = 'search-city/fetch-error',\n  FETCH_SUCCESS = 'search-city/fetch-success',\n  CLEAN_DATA = 'search-city/clean-data',\n}\n\ninterface CityItem {\n  city: string;\n  country: string;\n}\n\ninterface State {\n  isSearchLoading: boolean;\n  isSearchFetchingError: boolean;\n  searchData: CityItem[];\n}\n\ninterface Action {\n  type: string;\n  payload?: any;\n}\n\ninterface Context extends State {\n  cleanSearchData: () => void;\n  doSearchFetch: (urlPath: string) => void;\n}\n\nconst defaultState: State = {\n  isSearchLoading: false,\n  isSearchFetchingError: false,\n  searchData: [],\n};\n\nconst defaultContext: Context = {\n  ...defaultState,\n  cleanSearchData: () => null,\n  doSearchFetch: () => null,\n};\n\nexport const SearchContext = React.createContext(defaultContext);\n\nconst searchFetchReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_INIT:\n      return {\n        ...state,\n        isSearchLoading: true,\n        isSearchFetchingError: false,\n      };\n    case ActionTypes.FETCH_SUCCESS:\n      return {\n        ...state,\n        isSearchLoading: false,\n        isSearchFetchingError: false,\n        searchData: [...action.payload],\n      };\n    case ActionTypes.CLEAN_DATA:\n      return {\n        ...state,\n        searchData: [],\n      };\n    case ActionTypes.FETCH_ERROR:\n      return {\n        ...state,\n        isSearchLoading: false,\n        isSearchFetchingError: true,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst getTransformCityData = (data: any[]): CityItem[] =>\n  data.map(item => ({\n    city: item._embedded['city:item'].name,\n    country: item._embedded['city:item']._embedded['city:country'].name,\n  }));\n\nconst SearchStore = (props: any): JSX.Element => {\n  const [url, setUrl] = useState('');\n  const [state, dispatch] = useReducer(searchFetchReducer, defaultState);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: ActionTypes.FETCH_INIT });\n\n      try {\n        const result = await axios(url);\n        console.log(result);\n        if (!didCancel) {\n          dispatch({\n            type: ActionTypes.FETCH_SUCCESS,\n            payload: getTransformCityData(\n              result.data._embedded['city:search-results'],\n            ),\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: ActionTypes.FETCH_ERROR });\n        }\n      }\n    };\n\n    if (url) {\n      fetchData();\n    }\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  const cleanSearchData = () => {\n    dispatch({\n      type: ActionTypes.CLEAN_DATA,\n    });\n  };\n\n  const doSearchFetch = (urlPath: string) => {\n    setUrl(urlPath);\n  };\n\n  return (\n    <SearchContext.Provider\n      value={{\n        ...state,\n        cleanSearchData,\n        doSearchFetch,\n      }}\n    >\n      {props.children}\n    </SearchContext.Provider>\n  );\n};\n\nexport default SearchStore;\n"]},"metadata":{},"sourceType":"module"}